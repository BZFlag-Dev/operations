---
- name: Set up main server
  hosts: mainserver

  vars_files:
    - settings.yml

  vars:
    phpbb_version_parts: "{{ forums.phpbb_version | split('.') }}"

  tasks:
    #################
    # Initial setup #
    #################

    - name: Check if base hostname not set
      ansible.builtin.fail:
        msg: The BASE_HOSTNAME environment variable was not set
      when: base_hostname == ''

    - name: Set the hostname
      become: true
      ansible.builtin.hostname:
        name: "{{ base_hostname }}"
        use: systemd
      register: set_hostname

    - name: Update /etc/hosts
      become: true
      ansible.builtin.lineinfile:
        path: /etc/hosts
        regexp: '^127\.0\.1\.1[ \t]'
        line: "127.0.1.1\t{{ base_hostname }}"
      register: update_etc_hosts

    - name: Upgrade software packages
      become: true
      ansible.builtin.apt:
        update_cache: true
        upgrade: full
      register: apt_upgrade

    - name: Install necessary software packages
      become: true
      ansible.builtin.apt:
        name:
          - git
          - bzip2
          - screen
          - vim
          - haproxy
          - apache2
          - php-fpm
          - php-cli
          - php-mysql
          - php-redis
          - php-json
          - php-mbstring
          - php-intl
          - php-curl
          - php-gd
          - php-sqlite3
          - php-xml
          - mariadb-client
          - mariadb-server
          - redis
          - unzip
          - acl # Used by ansible for becoming an unprivileged user (https://github.com/ansible/ansible/issues/74830)
          - python3-pymysql # Used for the community.mysql tasks below.
        state: present
      register: apt_install

    - name: Reboot after hostname change or package installs
      become: true
      ansible.builtin.reboot:
      when: set_hostname.changed or update_etc_hosts.changed or apt_upgrade.changed or apt_install.changed

    - name: Remove unnecessary software packages
      become: true
      ansible.builtin.apt:
        autoremove: true

    - name: Install and configure nullmailer
      when: smtp.enabled
      block:
        - name: Install nullmailer and mailutils
          become: true
          ansible.builtin.apt:
            name:
              - nullmailer
              - mailutils
            state: present

        - name: Update /etc/mailname
          become: true
          ansible.builtin.copy:
            # TODO: Test if this should be the system hostname or the email domain
            content: "{{ smtp.default_domain }}"
            dest: /etc/mailname
            mode: '0644'
            owner: root
            group: root
          register: smtp_mailname

        - name: Update /etc/nullmailer/remotes
          become: true
          ansible.builtin.copy:
            content: >
              {{ smtp.relay_host }} smtp --port={{ smtp.relay_port }}
              {% if smtp.relay_protocol == 'tls' %}
              --tls
              {% elif smtp.relay_protocol == 'starttls' %}
              --starttls
              {% endif %}
              --user='{{ smtp.relay_username }}' --pass='{{ smtp.relay_password }}'
            dest: /etc/nullmailer/remotes
            mode: '0600'
            owner: mail
            group: mail
          register: smtp_remotes

        - name: Update /etc/nullmailer/adminaddr
          become: true
          ansible.builtin.copy:
            content: "{{ smtp.admin_address }}"
            dest: /etc/nullmailer/adminaddr
            mode: '0644'
            owner: root
            group: root
          register: smtp_adminaddr

        - name: Update /etc/nullmailer/defaultdomain
          become: true
          ansible.builtin.copy:
            content: "{{ smtp.default_domain }}"
            dest: /etc/nullmailer/defaultdomain
            mode: '0644'
            owner: root
            group: root
          register: smtp_defaultdomain

        - name: Restart nullmailer
          become: true
          ansible.builtin.systemd_service:
            name: nullmailer.service
            state: restarted
          when: smtp_mailname.changed or smtp_remotes.changed or smtp_adminaddr.changed or smtp_defaultdomain.changed

    - name: Enable Proxy FastCGI Apache module
      become: true
      ansible.builtin.command: a2enmod proxy_fcgi
      args:
        creates: /etc/apache2/mods-enabled/proxy_fcgi.load
      register: apache_mod_proxy_fcgi

    - name: Enable SetEnvIf Apache module
      become: true
      ansible.builtin.command: a2enmod setenvif
      args:
        creates: /etc/apache2/mods-enabled/setenvif.load
      register: apache_mod_setenvif

    - name: Enable rewrite Apache module
      become: true
      ansible.builtin.command: a2enmod rewrite
      args:
        creates: /etc/apache2/mods-enabled/rewrite.load
      register: apache_mod_rewrite

    - name: Enable headers Apache module
      become: true
      ansible.builtin.command: a2enmod headers
      args:
        creates: /etc/apache2/mods-enabled/headers.load
      register: apache_mod_headers

    - name: Enable PHP FPM configuration
      become: true
      ansible.builtin.command: a2enconf php8.2-fpm
      args:
        creates: /etc/apache2/conf-enabled/php8.2-fpm.conf
      register: apache_conf_php

    - name: Change Apache listening IP and port
      become: true
      ansible.builtin.template:
        src: apache2/ports.conf.j2
        dest: /etc/apache2/ports.conf
        mode: '0644'
      register: apache_conf_ports

    # This prevents the default virtualhost from overriding a virtualhost that uses the base hostname
    # TODO: Check if just disabling the default site is enough and could replace the next two steps
    - name: Add ServerName to default apache virtualhost
      become: true
      ansible.builtin.lineinfile:
        path: /etc/apache2/sites-available/000-default.conf
        regexp: '^\tServerName '
        insertafter: '^\t#ServerName '
        line: "\tServerName 127.0.0.1"
      register: apache_conf_default_servername

    - name: Change default VirtualHost address and port
      become: true
      ansible.builtin.lineinfile:
        path: /etc/apache2/sites-available/000-default.conf
        regexp: '^<VirtualHost '
        line: '<VirtualHost 127.0.0.1:8080>'
      register: apache_conf_default_virtualhost

    - name: Restart apache2
      become: true
      ansible.builtin.systemd_service:
        name: apache2.service
        state: restarted
      when: apache_mod_proxy_fcgi.changed or apache_mod_setenvif.changed or apache_mod_rewrite.changed or apache_mod_headers.changed or apache_conf_php.changed
        or apache_conf_ports.changed or apache_conf_default_servername.changed or apache_conf_default_virtualhost.changed

    - name: Check if composer is installed
      ansible.builtin.stat:
        path: /usr/local/bin/composer
      register: composer_installed

    - name: Install composer
      when: not composer_installed.stat.exists or not composer_installed.stat.executable
      block:
        - name: Download composer
          ansible.builtin.script: scripts/download-composer.sh

        - name: Copy composer to /usr/local/bin
          become: true
          ansible.builtin.copy:
            src: composer.phar
            dest: /usr/local/bin/composer
            remote_src: true
            mode: u+rwx,g+rx,o+rx

        - name: Delete composer.phar
          ansible.builtin.file:
            path: composer.phar
            state: absent

    - name: Update composer
      become: true
      ansible.builtin.command: composer self-update
      register: update_composer
      changed_when: "'already using the latest' not in update_composer.stderr"

    - name: Create /etc/apache2/site-snippets/
      become: true
      ansible.builtin.file:
        path: /etc/apache2/site-snippets
        state: directory
        mode: '0755'

    - name: Create directory for ansible
      become: true
      ansible.builtin.file:
        path: /var/www/.ansible
        state: directory
        owner: www-data
        group: www-data
        mode: '0755'

    - name: Create cache directory that composer can use
      become: true
      ansible.builtin.file:
        path: /var/www/.cache
        state: directory
        owner: www-data
        group: www-data
        mode: '0755'

    - name: Create empty list to track hostnames being used
      ansible.builtin.set_fact:
        hostnames: []

    ############
    #  Forums  #
    ############

    - name: Install and set up forums
      when: central.enabled
      block:
        - name: Append the hostname for the forums
          ansible.builtin.set_fact:
            hostnames: "{{ hostnames + ['forums.{{ base_hostname }}'] }}"

        - name: Create forums directory
          become: true
          ansible.builtin.file:
            path: /var/www/forums/public
            state: directory
            owner: www-data
            group: www-data
            mode: '0750'

        - name: Check if phpBB index.php exists
          become: true
          become_user: www-data
          ansible.builtin.stat:
            path: /var/www/forums/public/index.php
          register: forums_index_check

        - name: Acquire phpBB files
          when: not forums_index_check.stat.exists
          block:
            - name: Check if the phpBB archive exists
              become: true
              become_user: www-data
              ansible.builtin.stat:
                path: "/var/www/forums/phpBB-{{ forums.phpbb_version }}.tar.bz2"
                checksum_algorithm: sha256
              register: forums_archive_check

            - name: Upload phpBB archive from host and verify checksum
              when: forums.upload_local_archive
              block:
                - name: Upload phpBB archive
                  become: true
                  become_user: www-data
                  ansible.builtin.copy:
                    src: "phpBB-{{ forums.phpbb_version }}.tar.bz2"
                    dest: "/var/www/forums/phpBB-{{ forums.phpbb_version }}.tar.bz2"
                    mode: '0640'
                  when: not forums_archive_check.stat.exists or forums_archive_check.stat.checksum != forums.archive_sha256

                - name: Check if the uploaded phpBB archive has the correct hash
                  become: true
                  become_user: www-data
                  ansible.builtin.stat:
                    path: "/var/www/forums/phpBB-{{ forums.phpbb_version }}.tar.bz2"
                    checksum_algorithm: sha256
                  register: forums_archive_upload_check
                  failed_when: forums_archive_upload_check.stat.checksum != forums.archive_sha256

            - name: Download phpBB archive and verify checksum
              become: true
              become_user: www-data
              ansible.builtin.get_url:
                url:
                  "https://download.phpbb.com/pub/release/\
                  {{ phpbb_version_parts[0] }}.{{ phpbb_version_parts[1] }}/\
                  {{ forums.phpbb_version }}/\
                  phpBB-{{ forums.phpbb_version }}.tar.bz2"
                dest: "/var/www/forums/phpBB-{{ forums.phpbb_version }}.tar.bz2"
                mode: '0640'
                checksum: "sha256:{{ forums.archive_sha256 }}"
              when:
                - not forums.upload_local_archive
                - not forums_archive_check.stat.exists or forums_archive_check.stat.checksum != forums.archive_sha256

            - name: Extract phpBB
              become: true
              become_user: www-data
              ansible.builtin.unarchive:
                src: phpBB-3.3.15.tar.bz2
                dest: /var/www/forums/public
                extra_opts: ['--strip-components=1', '--show-stored-names']
                creates: /var/www/forums/public/index.php
              register: phpbb_unarchive

        - name: Delete viglink extension extension
          become: true
          become_user: www-data
          ansible.builtin.file:
            path: /var/www/forums/public/ext/phpbb/viglink/
            state: absent

        - name: Create MariaDB database for forums
          become: true
          community.mysql.mysql_db:
            name: forums
            login_unix_socket: /var/run/mysqld/mysqld.sock

        - name: Create password for forums admin user
          ansible.builtin.set_fact:
            forums_admin_password: "{{ lookup('ansible.builtin.password', 'credentials/forums/admin', length=16) }}"

        - name: Create password for forums MariaDB user
          ansible.builtin.set_fact:
            mariadb_forums_password: "{{ lookup('ansible.builtin.password', 'credentials/mariadb/forums', length=32) }}"

        - name: Create MariaDB user for forums and grant all access to the forums database
          become: true
          community.mysql.mysql_user:
            name: forums
            login_unix_socket: /var/run/mysqld/mysqld.sock
            # Quell warning. This shouldn't matter anyway, since we aren't using column level privileges
            column_case_sensitive: false
            password: "{{ mariadb_forums_password }}"
            priv: "forums.*:ALL"

        - name: Check contents of phpBB configuration for PHPBB_INSTALLED
          become: true
          become_user: www-data
          ansible.builtin.command: grep PHPBB_INSTALLED /var/www/forums/public/config.php
          register: forums_installed_check
          # We're just checking the exit code later to see if phpBB is installed, so don't set this as changed nor failed
          failed_when: false
          changed_when: false

        - name: Install phpBB
          when: forums_installed_check.rc != 0
          block:
            - name: Create the phpBB install configuration file
              become: true
              become_user: www-data
              ansible.builtin.template:
                src: phpbb/install-config.yml.j2
                dest: /var/www/forums/install-config.yml
                mode: '0640'

            - name: Run phpBB installer
              become: true
              become_user: www-data
              ansible.builtin.command: php /var/www/forums/public/install/phpbbcli.php install /var/www/forums/install-config.yml
              register: phpbb_installer
              failed_when: "'ERROR' in phpbb_installer.stdout"
              changed_when: "'The installer has finished successfully' in phpbb_installer.stdout"

            - name: Delete the phpBB installer configuration
              become: true
              become_user: www-data
              ansible.builtin.file:
                path: /var/www/forums/install-config.yml
                state: absent

        - name: Configure forums for HTTP or HTTPS
          become: true
          become_user: www-data
          ansible.builtin.script: phpbb/update_phpbb_config.sh{% if tls.enabled %} --tls{% endif %}
          register: phpbb_config
          changed_when: "'Updating' in phpbb_config.stdout"

        - name: Delete the phpBB install directory
          become: true
          become_user: www-data
          ansible.builtin.file:
            path: /var/www/forums/public/install/
            state: absent

        - name: Create cron job to phpBB cron:run
          become: true
          become_user: www-data
          ansible.builtin.cron:
            name: 'Run phpBB cron tasks'
            minute: '*/5'
            job: 'php /var/www/forums/public/bin/phpbbcli.php cron:run >/dev/null 2>&1'

        - name: Create the forums apache snippet configuration
          become: true
          ansible.builtin.template:
            src: apache2/site-snippets/forums.conf.j2
            dest: /etc/apache2/site-snippets/forums.conf
            mode: '0644'
          register: apache_snippet_forums

        - name: Create the forums virtualhost configuration
          become: true
          ansible.builtin.template:
            src: apache2/sites-available/forums.conf.j2
            dest: /etc/apache2/sites-available/forums.conf
            mode: '0644'
          register: apache_vhost_forums

        - name: Enable the forums site
          become: true
          ansible.builtin.command: a2ensite forums.conf
          register: apache_ensite_forums
          changed_when: "'already enabled' not in apache_ensite_forums.stdout"

        - name: Reload apache2
          become: true
          ansible.builtin.systemd_service:
            name: apache2.service
            state: reloaded
          when: apache_snippet_forums.changed or apache_vhost_forums.changed or apache_ensite_forums.changed

    ##############################################
    #  Central - Server list and authentication  #
    ##############################################

    - name: Install and set up central
      when: central.enabled
      block:
        - name: Append the hostname for the legacy server list
          ansible.builtin.set_fact:
            hostnames: "{{ hostnames + ['my.{{ base_hostname }}'] }}"

        - name: Append the hostname for the central services
          when: central.enable_rest_api
          ansible.builtin.set_fact:
            hostnames: "{{ hostnames + ['central.{{ base_hostname }}'] }}"

        - name: Create central directory
          become: true
          ansible.builtin.file:
            path: /var/www/central
            state: directory
            owner: www-data
            group: www-data
            mode: '0755'

        - name: Clone central repository
          become: true
          become_user: www-data
          ansible.builtin.git:
            repo: 'https://github.com/BZFlag-Dev/central'
            dest: /var/www/central
            version: master
          register: git_clone_central

        - name: Install dependencies for central using composer
          become: true
          become_user: www-data
          ansible.builtin.command: composer install -d /var/www/central --no-dev --optimize-autoloader --no-ansi
          register: composer_install_central
          changed_when: "'Nothing to install, update or remove' not in composer_install_central.stderr"

        - name: Install tools dependencies for central using composer
          become: true
          become_user: www-data
          ansible.builtin.command: composer install -d /var/www/central/tools --no-dev --no-ansi
          register: composer_install_central_tools
          changed_when: "'Nothing to install, update or remove' not in composer_install_central_tools.stderr"

        - name: Create MariaDB database for central
          become: true
          community.mysql.mysql_db:
            name: central
            login_unix_socket: /var/run/mysqld/mysqld.sock
          register: mariadb_created_central

        - name: Create password for central MariaDB user
          ansible.builtin.set_fact:
            mariadb_central_password: "{{ lookup('ansible.builtin.password', 'credentials/mariadb/central', length=32) }}"

        - name: Create MariaDB user for central and grant necessary access to the central and forums databases
          become: true
          community.mysql.mysql_user:
            name: central
            login_unix_socket: /var/run/mysqld/mysqld.sock
            # Quell warning. This shouldn't matter anyway, since we aren't using column level privileges
            column_case_sensitive: false
            password: "{{ mariadb_central_password }}"
            priv: "central.*:SELECT,INSERT,UPDATE,DELETE/forums.phpbb_groups:SELECT/forums.phpbb_user_group:SELECT/forums.phpbb_users:SELECT,UPDATE"

        - name: Create password for central_migration MariaDB user
          ansible.builtin.set_fact:
            mariadb_central_migration_password: "{{ lookup('ansible.builtin.password', 'credentials/mariadb/central_migration', length=32) }}"

        - name: Create MariaDB user for central_migration and grant necessary access to the central
          become: true
          community.mysql.mysql_user:
            name: central_migration
            login_unix_socket: /var/run/mysqld/mysqld.sock
            # Quell warning. This shouldn't matter anyway, since we aren't using column level privileges
            column_case_sensitive: false
            password: "{{ mariadb_central_migration_password }}"
            priv: "central.*:SELECT,INSERT,UPDATE,DELETE,ALTER,CREATE,DROP"

        - name: Create the central Phinx configuration
          become: true
          become_user: www-data
          ansible.builtin.template:
            src: central/phinx-config.php.j2
            dest: /var/www/central/phinx-config.php
            mode: '0640'

        - name: Migrate central database
          become: true
          become_user: www-data
          ansible.builtin.command: php tools/vendor/bin/phinx migrate
          args:
            chdir: /var/www/central
          register: central_phinx_migration
          changed_when: "'migrating' in central_phinx_migration.stdout"

        - name: Create the central configuration
          become: true
          become_user: www-data
          ansible.builtin.template:
            src: central/config.php.j2
            dest: /var/www/central/config.php
            mode: '0640'

        - name: Set up REST API documentation
          when: central.enable_rest_api
          block:
            - name: Create directory for swagger-ui
              become: true
              ansible.builtin.file:
                path: /var/www/central-docs/swagger-ui
                state: directory
                mode: '0750'
                owner: www-data
                group: www-data

            - name: Fetch the latest swagger-ui release information
              ansible.builtin.uri:
                url: https://api.github.com/repos/swagger-api/swagger-ui/releases/latest
                return_content: true
              register: github_release_swagger_ui

            - name: Clone swagger-ui repository
              become: true
              become_user: www-data
              ansible.builtin.git:
                repo: 'https://github.com/swagger-api/swagger-ui'
                dest: /var/www/central-docs/swagger-ui
                version: "{{ github_release_swagger_ui.json | community.general.json_query('tag_name') }}"
              register: git_clone_swagger_ui

            - name: Create directory for modified swagger-ui and generated OpenAPI files
              become: true
              ansible.builtin.file:
                path: /var/www/central-docs/public
                state: directory
                mode: '0750'
                owner: www-data
                group: www-data

            - name: Copy swagger-ui swagger-initializer.js # noqa: no-handler
              become: true
              become_user: www-data
              when: git_clone_swagger_ui.changed
              ansible.builtin.copy:
                src: /var/www/central-docs/swagger-ui/dist/swagger-initializer.js
                dest: /var/www/central-docs/public/swagger-initializer.js
                remote_src: true
                mode: '0640'

            - name: Update URL in swagger-initializer.js
              become: true
              become_user: www-data
              ansible.builtin.lineinfile:
                path: /var/www/central-docs/public/swagger-initializer.js
                regexp: 'url: '
                line: '   url: document.location.protocol + "//central.{{ base_hostname }}/docs/v1.yaml",'

            - name: Generate OpenAPI file # noqa: no-changed-when
              become: true
              become_user: www-data
              when: git_clone_central.changed or git_clone_swagger_ui.changed
              ansible.builtin.command: php tools/vendor/bin/openapi src/Controller/v1 -o /var/www/central-docs/public/v1.yaml -b vendor/autoload.php
              args:
                chdir: /var/www/central

        - name: Create the central apache snippet configuration
          become: true
          ansible.builtin.template:
            src: apache2/site-snippets/central.conf.j2
            dest: /etc/apache2/site-snippets/central.conf
            mode: '0644'
          register: apache_snippet_central

        - name: Create the central legacy apache snippet configuration
          become: true
          ansible.builtin.template:
            src: apache2/site-snippets/central-legacy.conf.j2
            dest: /etc/apache2/site-snippets/central-legacy.conf
            mode: '0644'
          register: apache_snippet_central_legacy

        - name: Create the central virtualhost configuration
          become: true
          ansible.builtin.template:
            src: apache2/sites-available/central.conf.j2
            dest: /etc/apache2/sites-available/central.conf
            mode: '0644'
          register: apache_vhost_central

        - name: Enable the central site
          become: true
          ansible.builtin.command: a2ensite central.conf
          register: apache_ensite_central
          changed_when: "'already enabled' not in apache_ensite_central.stdout"

        - name: Reload apache2 after changes for central site
          become: true
          ansible.builtin.systemd_service:
            name: apache2.service
            state: reloaded
          when: apache_snippet_central.changed or apache_snippet_central_legacy.changed or apache_vhost_central.changed or apache_ensite_central.changed

        - name: Create cron job to run central cron.php
          become: true
          become_user: www-data
          ansible.builtin.cron:
            name: 'Run cron.php for central'
            minute: '*/5'
            job: 'php /var/www/central/cron.php'

    ##############################
    # Homepage - Static homepage #
    ##############################

    - name: Install and set up homepage
      when: homepage.enabled
      block:
        - name: Append the hostnames for the homepage
          ansible.builtin.set_fact:
            hostnames: "{{ hostnames + ['{{ base_hostname }}', 'www.{{ base_hostname }}'] }}"

        - name: Create homepage directory where the built site is copied
          become: true
          ansible.builtin.file:
            path: /var/www/homepage
            state: directory
            owner: www-data
            group: www-data
            mode: '0750'

        - name: Create bzflag-bans directory where the master-bans.txt file lives
          become: true
          ansible.builtin.file:
            path: /var/www/homepage-bans
            state: directory
            owner: www-data
            group: www-data
            mode: '0750'

        - name: Create directory in /opt to store repositories and scripts for building the homepage
          become: true
          ansible.builtin.file:
            path: /opt/homepage
            state: directory
            owner: www-data
            group: www-data
            mode: '0750'

        - name: Create directory in /opt for the logs
          become: true
          ansible.builtin.file:
            path: /opt/homepage/logs
            state: directory
            owner: www-data
            group: www-data
            mode: '0750'

        - name: Clone bzflag.org repository
          become: true
          become_user: www-data
          ansible.builtin.git:
            repo: 'https://github.com/BZFlag-Dev/bzflag.org'
            dest: /opt/homepage/bzflag.org
            version: master
          register: git_clone_homepage_bzflag_org

        - name: Clone stakx repository
          become: true
          become_user: www-data
          ansible.builtin.git:
            repo: 'https://github.com/stakx-io/stakx'
            dest: /opt/homepage/stakx
            version: 0.2
          register: git_clone_homepage_stakx

        - name: Install stakx dependencies using composer
          become: true
          become_user: www-data
          ansible.builtin.command: composer install -d /opt/homepage/stakx --no-dev --optimize-autoloader --no-ansi
          register: composer_install_homepage_stakx
          changed_when: "'Nothing to install, update or remove' not in composer_install_homepage_stakx.stderr"

        - name: Fetch website assets
          become: true
          become_user: www-data
          ansible.builtin.command: php /opt/homepage/bzflag.org/fetch-assets.php
          register: php_fetch_assets_homepage
          changed_when: "'Downloading' in php_fetch_assets_homepage.stdout"

        - name: Delete matomo.yaml
          become: true
          become_user: www-data
          ansible.builtin.file:
            path: /opt/homepage/bzflag.org/_data/matomo.yaml
            state: absent
          when: not homepage.matomo.enabled

        - name: Create matomo.yaml
          become: true
          become_user: www-data
          ansible.builtin.template:
            src: homepage/matomo.yaml.j2
            dest: /opt/homepage/bzflag.org/_data/matomo.yaml
            mode: '0640'
          when: homepage.matomo.enabled

        - name: Create privacy.yaml
          become: true
          become_user: www-data
          ansible.builtin.template:
            src: homepage/privacy.yaml.j2
            dest: /opt/homepage/bzflag.org/_data/privacy.yaml
            mode: '0640'

        - name: Build the site # noqa: no-changed-when
          become: true
          become_user: www-data
          ansible.builtin.command: /opt/homepage/stakx/bin/stakx build --use-cache
          args:
            chdir: /opt/homepage/bzflag.org
          register: stakx_build_homepage
          when: git_clone_homepage_bzflag_org.changed or git_clone_homepage_stakx.changed or composer_install_homepage_stakx.changed or
            php_fetch_assets_homepage.changed

        - name: Copy the site to the final destination # noqa: no-handler
          become: true
          become_user: www-data
          ansible.builtin.copy:
            src: /opt/homepage/bzflag.org/_site/
            dest: /var/www/homepage
            remote_src: true
            mode: preserve
          when: stakx_build_homepage.changed

        # TODO: Replace this with something else, as this is archived
        - name: Clone bzflag-web repository
          become: true
          become_user: www-data
          ansible.builtin.git:
            repo: 'https://github.com/BZFlag-Dev/bzflag-web'
            dest: /var/www/homepage-bans
            version: masterban

        - name: Create flathub directory which will contain the org.flathub.VerifiedApps.txt file
          become: true
          ansible.builtin.file:
            path: /var/www/homepage-flathub
            state: directory
            owner: www-data
            group: www-data
            mode: '0750'

        - name: Create the org.flathub.VerifiedApps.txt file
          become: true
          become_user: www-data
          ansible.builtin.copy:
            content: 'f06adc6d-2675-4f19-a21e-137c12b98408'
            dest: /var/www/homepage-flathub/org.flathub.VerifiedApps.txt
            mode: '0640'

        - name: Create the homepage apache snippet configuration
          become: true
          ansible.builtin.template:
            src: apache2/site-snippets/homepage.conf.j2
            dest: /etc/apache2/site-snippets/homepage.conf
            mode: '0644'
          register: apache_snippet_homepage

        - name: Create the homepage virtualhost configuration
          become: true
          ansible.builtin.template:
            src: apache2/sites-available/homepage.conf.j2
            dest: /etc/apache2/sites-available/homepage.conf
            mode: '0644'
          register: apache_vhost_homepage

        - name: Enable the homepage site
          become: true
          ansible.builtin.command: a2ensite homepage.conf
          register: apache_ensite_homepage
          changed_when: "'already enabled' not in apache_ensite_homepage.stdout"

        - name: Reload apache2
          become: true
          ansible.builtin.systemd_service:
            name: apache2.service
            state: reloaded
          when: apache_snippet_homepage.changed or apache_vhost_homepage.changed or apache_ensite_homepage.changed

        - name: Create homepage update.sh
          become: true
          become_user: www-data
          ansible.builtin.template:
            src: homepage/update.sh.j2
            dest: /opt/homepage/update.sh
            mode: '0740'

        - name: Create cron job to run homepage update.sh
          become: true
          become_user: www-data
          ansible.builtin.cron:
            name: 'Automatically build homepage when updated'
            minute: '*/5'
            job: '/opt/homepage/update.sh >/dev/null 2>&1'

    ###############
    # Assets Site #
    ###############
    - name: Install and set up assets
      when: asset_manager.enabled
      block:
        - name: Append the hostname for the asset site
          ansible.builtin.set_fact:
            hostnames: "{{ hostnames + ['images.{{ base_hostname }}'] }}"

        - name: Create assets directory
          become: true
          ansible.builtin.file:
            path: /var/www/assets/public
            state: directory
            owner: www-data
            group: www-data
            mode: '0750'

        - name: Create asset-manager directory
          become: true
          ansible.builtin.file:
            path: /var/www/asset-manager
            state: directory
            owner: www-data
            group: www-data
            mode: '0750'

        - name: Clone asset-manager repository
          become: true
          become_user: www-data
          ansible.builtin.git:
            repo: 'https://github.com/BZFlag-Dev/asset-manager'
            dest: /var/www/asset-manager
            version: master

        - name: Create symbolic link for the directory index
          become: true
          become_user: www-data
          ansible.builtin.file:
            path: /var/www/assets/public/index.php
            src: /var/www/asset-manager/directory_index.php
            state: link

        - name: Install dependencies for asset-manager using composer
          become: true
          become_user: www-data
          ansible.builtin.command: composer install -d /var/www/asset-manager --no-dev --optimize-autoloader --no-ansi
          register: composer_install_asset_manager
          changed_when: "'Nothing to install, update or remove' not in composer_install_asset_manager.stderr"

        - name: Create the asset-manager configuration
          become: true
          become_user: www-data
          ansible.builtin.template:
            src: asset-manager/config.php.j2
            dest: /var/www/asset-manager/config.php
            mode: '0640'

        - name: Create the assets apache snippet configuration
          become: true
          ansible.builtin.template:
            src: apache2/site-snippets/assets.conf.j2
            dest: /etc/apache2/site-snippets/assets.conf
            mode: '0644'
          register: apache_snippet_assets

        - name: Create the assets virtualhost configuration
          become: true
          ansible.builtin.template:
            src: apache2/sites-available/assets.conf.j2
            dest: /etc/apache2/sites-available/assets.conf
            mode: '0644'
          register: apache_vhost_assets

        - name: Enable the assets site
          become: true
          ansible.builtin.command: a2ensite assets.conf
          register: apache_ensite_assets
          changed_when: "'already enabled' not in apache_ensite_assets.stdout"

        - name: Reload apache2 after changes for assets site
          become: true
          ansible.builtin.systemd_service:
            name: apache2.service
            state: reloaded
          when: apache_snippet_assets.changed or apache_vhost_assets.changed or apache_ensite_assets.changed

    ####################################################
    # Set up haproxy and, if enabled, TLS certificates #
    ####################################################

    - name: Download dhparam file
      become: true
      ansible.builtin.get_url:
        url: https://ssl-config.mozilla.org/ffdhe2048.txt
        dest: /etc/haproxy/dhparam
        mode: '0644'
      register: haproxy_dhparam

    - name: Create tarpit-hosts.lst
      become: true
      ansible.builtin.copy:
        content: ""
        dest: /etc/haproxy/tarpit-hosts.lst
        force: false
        mode: '0644'

    - name: Create denied-path-begs.lst
      become: true
      ansible.builtin.copy:
        content: ""
        dest: /etc/haproxy/denied-path-begs.lst
        force: false
        mode: '0644'

    - name: Install certbot
      when: tls.enabled
      become: true
      ansible.builtin.apt:
        name:
          - certbot
        state: present

    - name: Check if TLS certificate exists
      become: true
      ansible.builtin.stat:
        path: "/etc/letsencrypt/live/{{ base_hostname }}/fullchain.pem"
      register: tls_certificate

    - name: Request initial TLS certificate
      when: not tls_certificate.stat.exists and tls.enabled
      block:
        # Must run a minimal haproxy running that will forward the certbot request
        - name: Minimal haproxy config for certbot request
          become: true
          ansible.builtin.template:
            src: haproxy/haproxy_certbot.cfg.j2
            dest: /etc/haproxy/haproxy.cfg
            mode: '0644'

        - name: Reload haproxy configuration for certbot request
          become: true
          ansible.builtin.systemd_service:
            name: haproxy.service
            state: reloaded

        - name: Request certificates
          become: true
          # TODO: Support passing --test-cert for non-production systems?
          ansible.builtin.command:
            "certbot -d {{ hostnames | join(',') }} --standalone --non-interactive --http-01-port=1284 --register-unsafely-without-email --agree-tos \
            --cert-name {{ base_hostname }} --expand --server {{ tls.acme_server }} -n certonly"
          register: certbot_certonly
          changed_when: "'Successfully received certificate' in certbot_certonly.stdout"

    - name: Create link to certbot certificate
      when: tls.enabled
      become: true
      ansible.builtin.file:
        src: "/etc/letsencrypt/live/{{ base_hostname }}/fullchain.pem"
        path: "/etc/ssl/private/{{ base_hostname }}.crt"
        state: link

    - name: Create link to certbot key
      when: tls.enabled
      become: true
      ansible.builtin.file:
        src: "/etc/letsencrypt/live/{{ base_hostname }}/privkey.pem"
        path: "/etc/ssl/private/{{ base_hostname }}.key"
        state: link

    - name: Configure haproxy
      become: true
      ansible.builtin.template:
        src: haproxy/haproxy.cfg.j2
        dest: /etc/haproxy/haproxy.cfg
        mode: '0644'
      register: haproxy_cfg

    - name: Reload haproxy configuration
      become: true
      ansible.builtin.systemd_service:
        name: haproxy.service
        state: reloaded
      when: certbot_certonly.changed or haproxy_dhparam.changed or haproxy_cfg.changed
